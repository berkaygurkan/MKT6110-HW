%% File : mav_sys.tlc
%% Created: Tue May 12 14:56:04 2015
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "mav_sys.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  mav_sys "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void mav_sys_Outputs_wrapper(const real_T *Force,
                          const real_T *Torque,
                          real_T *y ,
			   const real_T *xC,
                          const real_T  *mass, const int_T p_width0);
  extern void mav_sys_Derivatives_wrapper(const real_T *Force,
                          const real_T *Torque,
                          const real_T *y,
                          real_T *dx ,
                           real_T *xC, 
                          const real_T  *mass, const int_T  p_width0);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  
  { 
   real_T *xC   = &%<LibBlockContinuousState("", "", 0)>;
              
   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   %assign pnelements1 = LibBlockParameterSize(P1)
   %assign cparam_width1 = pnelements1[0] * pnelements1[1]
   %if (cparam_width1) > 1
     %assign p_c1 = LibBlockMatrixParameter(P1)
   %else
     %assign p_c1 = LibBlockParameter(P1, "", "", 0)
   %endif

   
    xC[0] =  x0;
    xC[1] =  ;
    xC[2] =  ;
    xC[3] =  ;
    xC[4] =  ;
    xC[5] =  ;
    xC[6] =  ;
    xC[7] =  ;
    xC[8] =  ;
    xC[9] =  ;
    xC[10] =  ;
    xC[11] =  ;
  }
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
 { 
    real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
    mav_sys_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, pxc, %<pp1>, %<param_width1>);

  }  %%
%endfunction


%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
   /* S-Function "mav_sys_wrapper" Block: %<Name> */  

  
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1    
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1) 
  %else    
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  
 
  
 { 
   real_T *pxc = &%<LibBlockContinuousState("", "", 0)>;
   real_T *dx  =  &%<LibBlockContinuousStateDerivative("","",0)>;
   mav_sys_Derivatives_wrapper(%<pu0>, %<pu1>, %<py0>, dx, pxc, %<pp1>, %<param_width1>);
  }
  %%
%endfunction 
%% [EOF] mav_sys.tlc





